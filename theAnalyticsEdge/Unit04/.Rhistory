fit1
summary(fit1)
alpha=function(x,y){
vx=var(x)
vy=var(y)
cxy=cov(x,y)
(vy-cxy)/(vx+vy-2*cxy)
}
matplot(Xy, type = "l", legend = T)
Xy
names(Xy)
?Xy
fit1=lm(y~.,data=Xy)
fit1
summary(fit1)
matplot(Xy, type = "l", legend = T)
?matplot
matplot(Xy, type = "l", legend = T)
alpha(X1,y)
alpha(Xy$X1,Xy$y)
## What is the standard error of alpha?
alpha.fn=function(data, index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Xy,1:100)
?with
alpha.fn=function(data, index){
with(data[index,],alpha(X1,Y))
}
with(data[index,],alpha(x1,y))
alpha.fn=function(data, index){
with(data[index,],alpha(x1,y))
}
alpha.fn(Xy,1:100)
alpha.fn=function(data, index){
with(data[index,],alpha(Xy$x1,y))
}
alpha.fn(Xy,1:100)
alpha.fn=function(data, index){
with(data[index,],alpha(Xy$X1,Xy$y))
}
alpha.fn(Xy,1:100)
set.seed(1)
alpha.fn (Xy,sample(1:100,100,replace=TRUE))
boot.out=boot(Xy,alpha.fn,R=1000)
boot.out
plot(boot.out)
?rep
library(SDSFoundations)
survey <- StudentSurvey
library(SDSFoundations)
survey <- StudentSurvey
View(survey)
chr(survey)
str(survey)
fivenum(survey$name_letters)
survey$name_letters.mean()
mean(survey$name_letters)
s
mean(survey$name_letters)
chr()
mean(survey$name_letters)
summary(survey$name_letters)
sd(survey$name_letters)
hist(survey$name_letters)
fivenum(survey$name_letters)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =5)
xbar5[i] <-  mean(x)}
hist(xbar5,xlim=c(2,10))
mean(xbar5)
sd(xbar5)
sd(survey$name_letters)/sqrt(5)
mean(survey$name_letters)
sd(survey$name_letters)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =5)
xbar5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(xbar5,xlim=c(2,10))
# Calculate the mean and sd of the sampling distribution.
mean(xbar5)
sd(xbar5)
# Compare to the std dev predicted by the CTL.
sd(survey$name_letters)/sqrt(5)
#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(2,10))
mean(xbar15)
sd(xbar15)
sd(survey$name_letters)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(2,10))
mean(xbar25)
sd(xbar25)
sd(survey$name_letters)/sqrt(25)
hist(survey$happy)
fivenum(survey$happy)
mean(survey$happy)
sd(survey$happy)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =5)
xbar5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(xbar5,xlim=c(50,100))
# Calculate the mean and sd of the sampling distribution.
mean(xbar5)
sd(xbar5)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(5)
#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(50,100))
mean(xbar15)
sd(xbar15)
sd(survey$happy)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(50,100))
mean(xbar25)
sd(xbar25)
sd(survey$happy)/sqrt(25)
library(SDSFoundations)
survey <- StudentSurvey
str(survey)
hist(survey$austin)
mean(survey$austin)
sd(survey$austin)
sd(survey$austin) / sqrt(10)
xbar10 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$austin, size =10)
xbar10[i] <- mean(x)}
hist(xbar10,xlim=c(0,15))
qt(c(.025, .975), df=24)
qt(c(.025, .975), df=6)
qt(0.05, df=6)
library(SDSFoundations)
bull <- BullRiders
str(bull)
USA <-bull[bull$Country=="USA",]
# Summarize the bull rider weights
mean(USA$Weight)
sd(USA$Weight)
# Visualize the weight distribution
hist(USA$Weight, main='Histogram of US Bull Rider Weights',xlab='Weight (lbs)')
# Run the single sample t-test
t.test(USA$Weight, mu=190)
View(USA)
View(USA)
hist(bull$YearBorn, main = 'Histogram of Bull Rider Weights, xlab= 'Weight (lbs)')
mean(USA$Weight)
sd(USA$Weight)
t.test(USA$Weight, mu=190)
View(bull)
rider2014_5 = bull[bull$Events14 >= 5, ]
mean(rider2014_5$RidePer14)
sd(rider2014_5$RidePer14)
t.test(rider2014_5$RidePer14, mu=0.5)
hist(rider2014_5$RidePer14, main='Histogram of US Bull Rider Weights',xlab='Weight (lbs)')
bull$earnings_per = bull$Earnings12/bull$Events12
View(bull)
hist(rider2014_5$RidePer14,xlab='Weight (lbs)')
hist(bull$earnings_per)
bull$newvariable <- log(bull$originalvariable)
bull$newvariable <- log(bull$earnings_per)
hist(bull$newvariable)
mean(bull$newvariable)
?mean
mean(bull$newvariable, na.rm = FALSE)
mean(bull$newvariable, na.rm = TRUE)
t.test(bull$newvariable, mu=8.846387)
exp(8.572169 )
exp(9.120605)
potatochips = c(29.4	29	28.4	28.8	28.9	29.3	28.5	28.2)
potatochips = c(29.4, 29, 28.4, 28.8, 28.9, 29.3, 28.5, 28.2)
mean(potatochips)
sd(potatochips)
t.test(potatochips, mu=28.5)
qt(c(.025, .975), df=7)
qt(.95, df=24)
qt(c(0.05, 0.95), df=11)
qt(c(0.025, 0.975), 9)
qt(0.05, 9)
qt(0.95, 9)
sd(c(-1, 1, -2, -2))
sd(c(-1, 1, -2, -2))/2
qt(c(0.025, 0.975), 3)
qt(0.95, 3)
qt(0.05, 3)
qt(0.05, 4)
qt(0.05, 3)
qt(c(0.025, 0.975), 4)
qt(c(0.025, 0.975), 3)
t.test(c(-1, 1, -2, -2), 0)
t.test(c(-1, 1, -2, -2), mu = 0)
library(SDSFoundations)
post <- PostSurvey
library(SDSFoundations)
post <- PostSurvey
View(post)
underclass_happy <- post$happy[post$classification=='Freshman'|post$classification=='Sophomore']
upperclass_happy <- post$happy[post$classification=='Junior'|post$classification=='Senior']
# Check the normality assumption
hist(underclass_happy, xlab='Underclassman Happiness', main='Percent of Time Happy')
hist(upperclass_happy, xlab='Upperclassman Happiness', main='Percent of Time Happy')
t.test(underclass_happy, upperclass_happy)
mean(underclass_happy)
post$diff_happy <- post$happy - post$post_happy
# Check the normality assumption
hist(post$diff_happy, xlab= 'Difference in Happiness over the Semester', main = 'Happy-Post Happy')
# Run dependent t-test
t.test(post$happy, post$post_happy, paired=T)
post$diff_hw = post$hw_hours_college - post$hw_hours_HS
mean(post$diff_hw)
t.test(post$hw_hours_college, post$hw_hours_HS, alternative = 'greater')
?t.test
t.test(post$hw_hours_college, post$hw_hours_HS, alternative = 'greater', paired = TRUE)
t.test(post$diff_hw, alternative = 'greater')
greek = post[post$greek == yes, ]
greek = post[post$greek == "yes", ]
nongreek = post[post$greek == "no", ]
mean(greek$sleep_Sat) - mean(nongreek$sleep_Sat)
t.test(greek$sleep_Sat, nongreek$sleep_Sat, alternative = 'less')
hist(greek$sleep_Sat)
hist(nongreek$sleep_Sat)
hist(post$diff_hw)
hist(greek$sleep_Sat)
hist(nongreek$sleep_Sat)
nursing = post[post$major == "Nursing", ]
biology = post[post$major == "Biology", ]
hist(nursing$diff_hw)
hist(biology$diff_hw)
t.test(nursing$diff_hw, biology$diff_hw)
qt(0.95, 25)
qt(0.05, 25)
qt(0.05, 15)
leftright <- read.csv("C:/Users/Wanli/OneDrive/R/FoundationsOfDataAnalysisPart2/leftright.csv")
View(leftright)
sd(leftright$left)
sd(leftright$right)
leftright$diff = leftright$left - leftright$right
sd(leftright$diff)
sd(leftright$diff)/sqrt(16)
t.test(leftright$diff, alternative = 'greater')
t.test(leftright$diff)
chisq.test(c(38, 28, 24))
chisqt?
fdf
library(SDSFoundations)
res = TempskiResilience
library("SDSFoundations", lib.loc="~/R/win-library/3.2")
remove.packages("SDSFoundations", lib="~/R/win-library/3.2")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
library(SDSFoundations)
res <- TempskiResilience
View(res)
clin <- res[res$Group == "Clinical Sciences",]
#Question One
#Intial Correlations
vars <- c("QoL", "BDI")
cor(clin[,vars])
#RQ1 Model
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
confint(ov_mod)
summary(ov_mod)
summary(ov_mod)
summary(ov_mod)
?summary
?corr.test
plot(ov_mod, which=1)
cutoff <- 4/(ov_mod$df)
plot(ov_mod, which=4, cook.levels=cutoff)
# Question Two
#Initial correlations
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
?corr.test
#RQ2 Model
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
?lmBeta
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
cor(clin[,vars], use="pairwise.complete.obs")
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
1 - 0.0134
vars <- c("QoL", "BDI")
cor(clin[,vars])
#RQ1 Model
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
confint(ov_mod)
#Diagnostics
plot(ov_mod, which=1)
cutoff <- 4/(ov_mod$df)
plot(ov_mod, which=4, cook.levels=cutoff)
# Question Two
#Initial correlations
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
?corr.test
#RQ2 Model
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
basic <- res[res$Group == "Basic Sciences",]
View(basic)
basic <- res[res$Group == "Basic Sciences",]
vars <- c("MS.QoL", "WHOQOL.ENV", "WHOQOL.PH", "WHOQOL.PSY", "WHOQOL.SOC", "WHOQOL.ENV")
cor(basic[,vars], use="pairwise.complete.obs")
vars <- c("MS.QoL", "WHOQOL.PH", "WHOQOL.PSY", "WHOQOL.SOC", "WHOQOL.ENV")
cor(basic[,vars], use="pairwise.complete.obs")
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=clin)
summary(ms_mod)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
lmBeta(ms_mod)
?lmBeta
round(pCorr(ms_mod), 4)
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=basic)
summary(ms_mod)
lmBeta(ms_mod)
?lmBeta
round(pCorr(ms_mod), 4)
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=basic)
summary(ms_mod)
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
ms_mod <- lm(BDI ~ Female + Age + State.Anxiety + Trait.anxiety, data=clin)
summary(ms_mod)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
qf(.95, df1=4, df2=88)
qf(.05, df1=4, df2=88)
qf(.95, df1=4, df2=88)
qf(.95, df1=4, df2=1)
qf(.95, df1=4, df2=88)
install.packages("caTools")
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge/Unit04")
census = read.csv("census.csv")
summary(census)
set.seed(2000)
split = sample.split(census$over50k, SplitRatio = 0.6)
library(caTools)
set.seed(2000)
split = sample.split(census$over50k, SplitRatio = 0.6)
train = subset(census, split == TRUE)
test = subset(census, split == FALSE)
summary(train)
censusLogit = glm(over50K ~ ., data = train, family = "binomial")
censusLogit = glm(over50k ~ ., data = train, family = "binomial")
censusLogit
summary(censusLogit)
LogitPred = predict(censusLogit, newdata = test, type = "response")
table(test$over50k, LogitPred >= 0.5)
(9051 + 1888)/nrow(test)
table(train$over50k)
table(test$over50k)/nrow(test)
library(ROCR)
ROCRpred = prediction(censusLogit, test$over50k)
ROCRpred = prediction(LogitPred, test$over50k)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
auc = as.numeric(performance(ROCRpred, "auc")@y.values)
auc
library(rpart)
library(rpart.plot)
CARTb = rpart(over50k ~ ., data=train, method="class")
CARTmodel = rpart(over50k ~ ., data=train, method="class")
CARTbPred = predict(CARTmodel, newdata = test, type="class")
CARTbPred
table(test$over50k, CARTbPred)
(9243 + 1596) / nrow(test)
plot(CARTmodel)
rpart.plot(CARTmodel)
prp(censustree)
prp(CARTmodel)
rpart.plot(CARTmodel)
plot(ROCRperf)
plot(ROCRperf, colorize = TRUE)
plot(ROCRperf, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-0.2, 1.7))
summary(ROCRperf)
auc
ROCRpredCART = prediction(CARTbPred, test$over50k)
library(rpart)
library(rpart.plot)
CARTmodel = rpart(over50k ~ ., data=train, method="class")
rpart.plot(CARTmodel)
#prp(CARTmodel)
#plot(CARTmodel)
# CARTbPred = predict(CARTb, newdata = test) # this is not good for this question, because we need the predictions
CARTbPred = predict(CARTmodel, newdata = test, type="class")
#CARTbPred
table(test$over50k, CARTbPred)
(9243 + 1596) / nrow(test)
#  Problem 2.5 - A CART Model - ROC curve
ROCRpredCART = prediction(CARTbPred, test$over50k)
CARTPred_ed = predict(CARTmodel, newdata = test)
ROCRpredCART = prediction(CARTPred_edPred, test$over50k)
ROCRpredCART = prediction(CARTPred_ed, test$over50k)
CARTPred_ed
CARTPred
CARTPred = predict(CARTmodel, newdata = test, type="class")
CARTPred
CARTPred_ed = predict(CARTmodel, newdata = test)
CARTPred_ed
ROCRpredCART = prediction(CARTPred_ed[,2], test$over50k)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
auc = as.numeric(performance(ROCRpred, "auc")@y.values)
auc
ROCRperfCART = performance(ROCRpred, "tpr", "fpr")
auc = as.numeric(performance(ROCRpred, "auc")@y.values)
auc
ROCRperfCART = performance(ROCRpredCART, "tpr", "fpr")
auc = as.numeric(performance(ROCRpredCART, "auc")@y.values)
auc
plot(ROCRperfCART)
plot(ROCRperfCART, colorize = TRUE)
plot(ROCRperfCART, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-0.2, 1.7))
set.seed(1)
trainSmall = train[sample(nrow(train), 2000), ]
library(randomForest)
censusForest = randomForest(over50k ~ ., data = trainSmall)
PredictForest = predict(censusForest, newdata = test)
PredictForest
table(test$over50k, PredictForest)
(9614 + 1050) / nrow(test)
vu = varUsed(censusForest, count=TRUE)
vusorted = sort(vu, decreasing = FALSE, index.return = TRUE)
dotchart(vusorted$x, names(censusForest$forest$xlevels[vusorted$ix]))
varImpPlot(censusForest)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
set.seed(2)
library(caret)
library(e1071)
numFolds = trainControl(method = "cv", number = 10)
cartGrid = expand.grid( .cp = seq(0.002,0.1,0.002))
train(over50k ~., data = train, method = "rpart", trControl = numFolds, tuneGrid = cartGrid )
TreeModelnew <- rpart(over50k ~., data=train, cp=0.002, method="class")
TreePredictnew <- predict(TreeModelnew, newdata=test, type="class")
table(test$over50k, TreePredictnew)
prp(newTreeModel)
prp(TreeModelnew)
(9178 + 1838) / nrow(test)
summary(TreePredictnew)
summary(TreeModelnew)
