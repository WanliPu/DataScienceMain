?rep
library(SDSFoundations)
survey <- StudentSurvey
library(SDSFoundations)
survey <- StudentSurvey
View(survey)
chr(survey)
str(survey)
fivenum(survey$name_letters)
survey$name_letters.mean()
mean(survey$name_letters)
s
mean(survey$name_letters)
chr()
mean(survey$name_letters)
summary(survey$name_letters)
sd(survey$name_letters)
hist(survey$name_letters)
fivenum(survey$name_letters)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =5)
xbar5[i] <-  mean(x)}
hist(xbar5,xlim=c(2,10))
mean(xbar5)
sd(xbar5)
sd(survey$name_letters)/sqrt(5)
mean(survey$name_letters)
sd(survey$name_letters)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =5)
xbar5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(xbar5,xlim=c(2,10))
# Calculate the mean and sd of the sampling distribution.
mean(xbar5)
sd(xbar5)
# Compare to the std dev predicted by the CTL.
sd(survey$name_letters)/sqrt(5)
#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(2,10))
mean(xbar15)
sd(xbar15)
sd(survey$name_letters)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(2,10))
mean(xbar25)
sd(xbar25)
sd(survey$name_letters)/sqrt(25)
hist(survey$happy)
fivenum(survey$happy)
mean(survey$happy)
sd(survey$happy)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =5)
xbar5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(xbar5,xlim=c(50,100))
# Calculate the mean and sd of the sampling distribution.
mean(xbar5)
sd(xbar5)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(5)
#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(50,100))
mean(xbar15)
sd(xbar15)
sd(survey$happy)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(50,100))
mean(xbar25)
sd(xbar25)
sd(survey$happy)/sqrt(25)
library(SDSFoundations)
survey <- StudentSurvey
str(survey)
hist(survey$austin)
mean(survey$austin)
sd(survey$austin)
sd(survey$austin) / sqrt(10)
xbar10 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$austin, size =10)
xbar10[i] <- mean(x)}
hist(xbar10,xlim=c(0,15))
qt(c(.025, .975), df=24)
qt(c(.025, .975), df=6)
qt(0.05, df=6)
library(SDSFoundations)
bull <- BullRiders
str(bull)
USA <-bull[bull$Country=="USA",]
# Summarize the bull rider weights
mean(USA$Weight)
sd(USA$Weight)
# Visualize the weight distribution
hist(USA$Weight, main='Histogram of US Bull Rider Weights',xlab='Weight (lbs)')
# Run the single sample t-test
t.test(USA$Weight, mu=190)
View(USA)
View(USA)
hist(bull$YearBorn, main = 'Histogram of Bull Rider Weights, xlab= 'Weight (lbs)')
mean(USA$Weight)
sd(USA$Weight)
t.test(USA$Weight, mu=190)
View(bull)
rider2014_5 = bull[bull$Events14 >= 5, ]
mean(rider2014_5$RidePer14)
sd(rider2014_5$RidePer14)
t.test(rider2014_5$RidePer14, mu=0.5)
hist(rider2014_5$RidePer14, main='Histogram of US Bull Rider Weights',xlab='Weight (lbs)')
bull$earnings_per = bull$Earnings12/bull$Events12
View(bull)
hist(rider2014_5$RidePer14,xlab='Weight (lbs)')
hist(bull$earnings_per)
bull$newvariable <- log(bull$originalvariable)
bull$newvariable <- log(bull$earnings_per)
hist(bull$newvariable)
mean(bull$newvariable)
?mean
mean(bull$newvariable, na.rm = FALSE)
mean(bull$newvariable, na.rm = TRUE)
t.test(bull$newvariable, mu=8.846387)
exp(8.572169 )
exp(9.120605)
potatochips = c(29.4	29	28.4	28.8	28.9	29.3	28.5	28.2)
potatochips = c(29.4, 29, 28.4, 28.8, 28.9, 29.3, 28.5, 28.2)
mean(potatochips)
sd(potatochips)
t.test(potatochips, mu=28.5)
qt(c(.025, .975), df=7)
qt(.95, df=24)
qt(c(0.05, 0.95), df=11)
qt(c(0.025, 0.975), 9)
qt(0.05, 9)
qt(0.95, 9)
sd(c(-1, 1, -2, -2))
sd(c(-1, 1, -2, -2))/2
qt(c(0.025, 0.975), 3)
qt(0.95, 3)
qt(0.05, 3)
qt(0.05, 4)
qt(0.05, 3)
qt(c(0.025, 0.975), 4)
qt(c(0.025, 0.975), 3)
t.test(c(-1, 1, -2, -2), 0)
t.test(c(-1, 1, -2, -2), mu = 0)
library(SDSFoundations)
post <- PostSurvey
library(SDSFoundations)
post <- PostSurvey
View(post)
underclass_happy <- post$happy[post$classification=='Freshman'|post$classification=='Sophomore']
upperclass_happy <- post$happy[post$classification=='Junior'|post$classification=='Senior']
# Check the normality assumption
hist(underclass_happy, xlab='Underclassman Happiness', main='Percent of Time Happy')
hist(upperclass_happy, xlab='Upperclassman Happiness', main='Percent of Time Happy')
t.test(underclass_happy, upperclass_happy)
mean(underclass_happy)
post$diff_happy <- post$happy - post$post_happy
# Check the normality assumption
hist(post$diff_happy, xlab= 'Difference in Happiness over the Semester', main = 'Happy-Post Happy')
# Run dependent t-test
t.test(post$happy, post$post_happy, paired=T)
post$diff_hw = post$hw_hours_college - post$hw_hours_HS
mean(post$diff_hw)
t.test(post$hw_hours_college, post$hw_hours_HS, alternative = 'greater')
?t.test
t.test(post$hw_hours_college, post$hw_hours_HS, alternative = 'greater', paired = TRUE)
t.test(post$diff_hw, alternative = 'greater')
greek = post[post$greek == yes, ]
greek = post[post$greek == "yes", ]
nongreek = post[post$greek == "no", ]
mean(greek$sleep_Sat) - mean(nongreek$sleep_Sat)
t.test(greek$sleep_Sat, nongreek$sleep_Sat, alternative = 'less')
hist(greek$sleep_Sat)
hist(nongreek$sleep_Sat)
hist(post$diff_hw)
hist(greek$sleep_Sat)
hist(nongreek$sleep_Sat)
nursing = post[post$major == "Nursing", ]
biology = post[post$major == "Biology", ]
hist(nursing$diff_hw)
hist(biology$diff_hw)
t.test(nursing$diff_hw, biology$diff_hw)
qt(0.95, 25)
qt(0.05, 25)
qt(0.05, 15)
leftright <- read.csv("C:/Users/Wanli/OneDrive/R/FoundationsOfDataAnalysisPart2/leftright.csv")
View(leftright)
sd(leftright$left)
sd(leftright$right)
leftright$diff = leftright$left - leftright$right
sd(leftright$diff)
sd(leftright$diff)/sqrt(16)
t.test(leftright$diff, alternative = 'greater')
t.test(leftright$diff)
chisq.test(c(38, 28, 24))
chisqt?
fdf
library(SDSFoundations)
res = TempskiResilience
library("SDSFoundations", lib.loc="~/R/win-library/3.2")
remove.packages("SDSFoundations", lib="~/R/win-library/3.2")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
library(SDSFoundations)
res <- TempskiResilience
View(res)
clin <- res[res$Group == "Clinical Sciences",]
#Question One
#Intial Correlations
vars <- c("QoL", "BDI")
cor(clin[,vars])
#RQ1 Model
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
confint(ov_mod)
summary(ov_mod)
summary(ov_mod)
summary(ov_mod)
?summary
?corr.test
plot(ov_mod, which=1)
cutoff <- 4/(ov_mod$df)
plot(ov_mod, which=4, cook.levels=cutoff)
# Question Two
#Initial correlations
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
?corr.test
#RQ2 Model
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
?lmBeta
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
cor(clin[,vars], use="pairwise.complete.obs")
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
1 - 0.0134
vars <- c("QoL", "BDI")
cor(clin[,vars])
#RQ1 Model
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
confint(ov_mod)
#Diagnostics
plot(ov_mod, which=1)
cutoff <- 4/(ov_mod$df)
plot(ov_mod, which=4, cook.levels=cutoff)
# Question Two
#Initial correlations
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
?corr.test
#RQ2 Model
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
basic <- res[res$Group == "Basic Sciences",]
View(basic)
basic <- res[res$Group == "Basic Sciences",]
vars <- c("MS.QoL", "WHOQOL.ENV", "WHOQOL.PH", "WHOQOL.PSY", "WHOQOL.SOC", "WHOQOL.ENV")
cor(basic[,vars], use="pairwise.complete.obs")
vars <- c("MS.QoL", "WHOQOL.PH", "WHOQOL.PSY", "WHOQOL.SOC", "WHOQOL.ENV")
cor(basic[,vars], use="pairwise.complete.obs")
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=clin)
summary(ms_mod)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
lmBeta(ms_mod)
?lmBeta
round(pCorr(ms_mod), 4)
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=basic)
summary(ms_mod)
lmBeta(ms_mod)
?lmBeta
round(pCorr(ms_mod), 4)
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=basic)
summary(ms_mod)
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
ms_mod <- lm(BDI ~ Female + Age + State.Anxiety + Trait.anxiety, data=clin)
summary(ms_mod)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
qf(.95, df1=4, df2=88)
qf(.05, df1=4, df2=88)
qf(.95, df1=4, df2=88)
qf(.95, df1=4, df2=1)
qf(.95, df1=4, df2=88)
install.packages("caTools")
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge/Unit04")
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge/Unit04")
boston = read.csv("boston.csv")
str(boston)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$CHAS==1], boston$LAT[boston$CHAS==1], col="blue", pch=19)
points(boston$LON[boston$TRACT==3531],boston$LAT[boston$TRACT==3531],col="red", pch=20)
summary(boston$NOX)
points(boston$LON[boston$NOX>=0.55], boston$LAT[boston$NOX>=0.55], col="green", pch=20)
plot(boston$LON, boston$LAT)
summary(boston$MEDV)
points(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch=20)
plot(boston$LAT, boston$MEDV)
plot(boston$LON, boston$MEDV)
plot(boston$LAT, boston$MEDV)
latlonlm = lm(MEDV ~ LAT + LON, data=boston)
summary(latlonlm)
plot(boston$LON, boston$LAT)
points(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch=20)
latlonlm$fitted.values
points(boston$LON[latlonlm$fitted.values >= 21.2], boston$LAT[latlonlm$fitted.values >= 21.2], col="blue", pch="$")
library(rpart)
library(rpart.plot)
# CART model
latlontree = rpart(MEDV ~ LAT + LON, data=boston)
prp(latlontree)
fittedvalues = predict(latlontree)
points(boston$LON[fittedvalues>21.2], boston$LAT[fittedvalues>=21.2], col="blue", pch="$")
plot(boston$LON, boston$LAT)
points(boston$LON[fittedvalues>21.2], boston$LAT[fittedvalues>=21.2], col="blue", pch="$")
latlontree = rpart(MEDV ~ LAT + LON, data=boston, minbucket=50)
plot(latlontree)
text(latlontree)
# Visualize Output
plot(boston$LON,boston$LAT)
abline(v=-71.07)
abline(h=42.21)
abline(h=42.17)
points(boston$LON[boston$MEDV>=21.2], boston$LAT[boston$MEDV>=21.2], col="red", pch=20)
library(caTools)
set.seed(123)
split = sample.split(boston$MEDV, SplitRatio = 0.7)
train = subset(boston, split==TRUE)
test = subset(boston, split==FALSE)
# Create linear regression
linreg = lm(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + TAX + PTRATIO, data=train)
summary(linreg)
# Make predictions
linreg.pred = predict(linreg, newdata=test)
linreg.sse = sum((linreg.pred - test$MEDV)^2)
linreg.sse
# Create a CART model
tree = rpart(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + TAX + PTRATIO, data=train)
prp(tree)
# Make predictions
tree.pred = predict(tree, newdata=test)
tree.sse = sum((tree.pred - test$MEDV)^2)
tree.sse
library(caret)
library(e1071)
# Number of folds
tr.control = trainControl(method = "cv", number = 10)
# cp values
cp.grid = expand.grid( .cp = (0:10)*0.001)
# What did we just do?
1*0.001
10*0.001
0:10
0:10 * 0.001
# Cross-validation
tr = train(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + TAX + PTRATIO, data = train, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
# Make predictions
best.tree.pred = predict(best.tree, newdata=test)
best.tree.sse = sum((best.tree.pred - test$MEDV)^2)
best.tree.sse
tr = train(MEDV ~ LAT + LON + CRIM + ZN + INDUS + CHAS + NOX + RM + AGE + DIS + RAD + TAX + PTRATIO, data = train, method = "rpart", trControl = tr.control, tuneGrid = cp.grid)
# Extract tree
best.tree = tr$finalModel
prp(best.tree)
# Make predictions
best.tree.pred = predict(best.tree, newdata=test)
best.tree.sse = sum((best.tree.pred - test$MEDV)^2)
best.tree.sse
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge/Unit04")
gerber = read.csv("gerber.csv")
str(gerber)
summary(gerber)
table(gerber$voting)
voting = table(gerber$voting)
prop.table(voting)
voting_civic = table(gerber$voting[gerber$civicduty == 1])
prop.table(voting_civic)
voting_hawthorne = table(gerber$voting[gerber$hawthorne == 1])
prop.table(voting_hawthorne)
voting_self = table(gerber$voting[gerber$self == 1])
prop.table(voting_self)
voting_neighbors = table(gerber$voting[gerber$neighbors == 1])
prop.table(voting_neighbors)
?glm
gerberLogit = glm(voting ~ civicduty + hawthorne + self + neighbors, data = gerber, family = "binomial")
summary(gerberLogit)
?predict
gerberLogitPred = predict(gerberLogit, type = "response")
table(gerber$voting, gerberLogitPred >= 0.5)
table(gerber$voting, gerberLogitPred >= 0.3)
(134513 + 51966) / nrow(gerber)
table(gerber$voting, gerberLogitPred >= 0.5)
235388/nrow(gerber)
ROCRpred = prediction(gerberLogitPred, gerber$voting)
library(ROCR)
ROCRpred = prediction(gerberLogitPred, gerber$voting)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
auc = as.numeric(performance(ROCRperf, "auc")@y.values)
auc
ROCRpred = prediction(gerberLogitPred, gerber$voting)
ROCRperf = performance(ROCRpred, "tpr", "fpr")
auc = as.numeric(performance(ROCRperf, "auc")@y.values)
auc = as.numeric(performance(ROCRpred, "auc")@y.values)
auc
library(rpart)
library(rpart.plot)
CARTmodel = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber)
prp(latlontree)
prp(CARTmodel)
CARTmodel2 = rpart(voting ~ civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel2)
CARTmodel3 = rpart(voting ~ sex + civicduty + hawthorne + self + neighbors, data=gerber, cp=0.0)
prp(CARTmodel3)
CARTmodel3 = rpart(voting ~ civicduty + hawthorne + self + neighbors + sex, data=gerber, cp=0.0)
prp(CARTmodel3)
table(gerber$sex, gerber$control)
table(gerber$sex[gerber$sex == 1], gerber$control)
table(gerber$control[gerber$sex == 1])
table(gerber$voting[gerber$control == 1], gerber$sex[gerber$control == 1])
CARTmodel4 = rpart(voting ~ control, data=gerber, cp=0.0)
prp(CARTmodel4)
CARTmodel5 = rpart(voting ~ control + sex, data=gerber, cp=0.0)
prp(CARTmodel5)
abs(Control Prediction - Non-Control Prediction)
prediction.control = predict(CARTmodel4)
prediction.control
abs(prediction.control[gerber$control>= 0.5] - prediction.control[gerber$control < 0.5])
abs(mean(prediction.control[gerber$control>= 0.5]) - mean(prediction.control[gerber$control < 0.5])
abs(mean(prediction.control[gerber$control>= 0.5]) - mean(prediction.control[gerber$control < 0.5]))
(mean(prediction.control[gerber$control>= 0.5]) - mean(prediction.control[gerber$control < 0.5]))
prp(CARTcontrol, digits=6)
prp(CARTmodel4, digits=6)
CARTmodel5 = rpart(voting ~ control + sex, data=gerber, cp=0.0)
prp(CARTmodel5, digits = 6)
gerberLogit.control.sex = glm(voting ~ control + sex, data = gerber, family = "binomial")
summary(gerberLogit.control.sex)
