## What is the standard error of alpha?
alpha.fn=function(data, index){
with(data[index,],alpha(X,Y))
}
alpha.fn(Xy,1:100)
?with
alpha.fn=function(data, index){
with(data[index,],alpha(X1,Y))
}
with(data[index,],alpha(x1,y))
alpha.fn=function(data, index){
with(data[index,],alpha(x1,y))
}
alpha.fn(Xy,1:100)
alpha.fn=function(data, index){
with(data[index,],alpha(Xy$x1,y))
}
alpha.fn(Xy,1:100)
alpha.fn=function(data, index){
with(data[index,],alpha(Xy$X1,Xy$y))
}
alpha.fn(Xy,1:100)
set.seed(1)
alpha.fn (Xy,sample(1:100,100,replace=TRUE))
boot.out=boot(Xy,alpha.fn,R=1000)
boot.out
plot(boot.out)
# Get the current directory
getwd()
ls()
# Read the csv file
mvt = read.csv("mvtWeek1.csv")
# Structure of the dataset
str(mvt)
# Statistical summary
summary(mvt)
table(mvt$Arrest)
Alley =  mvt[mvt$LocationDescription == "ALLEY", ]
str(Alley)
# Now, let's convert these characters into a Date object in R. In your R console, type
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
table(mvt$Month)
min(table(mvt$Month))
table(mvt$Weekday)
max(table(mvt$Weekday))
table(mvt$Month, mvt$Arrest)
hist(mvt$Date, breaks=100)
getwd()
setwd("C:/Users/Wanli/OneDrive/R/theAnalyticsEdge")
getwd()
ls()
# Read the csv file
mvt = read.csv("mvtWeek1.csv")
# Structure of the dataset
str(mvt)
# Statistical summary
summary(mvt)
table(mvt$Arrest)
Alley =  mvt[mvt$LocationDescription == "ALLEY", ]
str(Alley)
# Now, let's convert these characters into a Date object in R. In your R console, type
DateConvert = as.Date(strptime(mvt$Date, "%m/%d/%y %H:%M"))
summary(DateConvert)
mvt$Month = months(DateConvert)
mvt$Weekday = weekdays(DateConvert)
mvt$Date = DateConvert
table(mvt$Month)
min(table(mvt$Month))
table(mvt$Weekday)
max(table(mvt$Weekday))
table(mvt$Month, mvt$Arrest)
hist(mvt$Date, breaks=100)
boxplot(mvt$Date ~ mvt$Arrest)
boxplot(mvt$Arrest ~ mvt$Date)
table(mvt$Year)
table?
table()?
?table()
?table
table(mvt$Year, mvt$Arrest)
prop.table(mvt$Year, mvt$Arrest)
prop.table(year_arrest)
year_arrest = table(mvt$Year, mvt$Arrest)
prop.table(year_arrest)
table(mvt$Year, mvt$Arrest, useNA = "ifany")
prop.table(year_arrest2)
year_arrest2 = table(mvt$Year, mvt$Arrest, useNA = "ifany")
prop.table(year_arrest2)
prop.table(year_arrest, axis = 1)
?prop.table
prop.table(year_arrest, 1)
prop.table(year_arrest, 0)
prop.table(year_arrest, 1)
prop.table(year_arrest, 2)
prop.table(year_arrest, 1)
sort(table(mvt$LocationDescription))
Top5 = mvt[mvt$LocationDescription == "Gas Station" | mvt$LocationDescription == "Street" | mvt$LocationDescription == "Parking Lot/Garage (Non-Residential)" | mvt$LocationDescription == "Alley" | mvt$LocationDescription == "Driveway (Residential)", ]
View(Top5)
View(Top5)
Top5 = mvt[mvt$LocationDescription == "Gas Station", ]
Top5 = mvt[mvt$LocationDescription == "Gas Station", ]
Top5 = mvt[mvt$LocationDescription == "Street", ]
Top5 = mvt[mvt$LocationDescription == "STREET", ]
mvt$LocationDescription == "Parking Lot/Garage (Non-Residential)" |
mvt$LocationDescription == "Alley" |
mvt$LocationDescription == "Driveway (Residential)", ]
Top5 = mvt[mvt$LocationDescription == "GAS STATION" |
mvt$LocationDescription == "STREET" |
mvt$LocationDescription == "PARKING LOT/GARAGE(NON.RESID.)" |
mvt$LocationDescription == "ALLEY" |
mvt$LocationDescription == "DRIVEWAY - RESIDENTIAL", ]
str(Top5)
table(Top5$LocationDescription)
View(Top5)
table(Top5$LocationDescription)
table(Top5$LocationDescription)
str(Top5)
Top5$LocationDescription = factor(Top5$LocationDescription)
table(Top5$LocationDescription)
table(Top5$LocationDescription, Top5$Arrest)
top5table = table(Top5$LocationDescription, Top5$Arrest)
prop.table(top5table)
prop.table(top5table, 1)
table(Top5$Date)
table(Top5$Weekday)
table(Top5[Top5$LocationDescription == "GAS STATION",]$Weekday)
table(Top5[Top5$LocationDescription == "DRIVEWAY - RESIDENTIAL",]$Weekday)
dir()
clc
clc()
clear()
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge")
ds = read.csv('data_scientist')
ds = read.csv('data_scientist.csv')
str(ds)
summary(ds)
ds[which.min(ds)]
ds[which.min(ds$salary)]
ds[which.min(ds$salary), ]
hist(ds$salary)
ds[which.max(ds$salary), ]
certified = subset(ds, ds$status=='CERTIFIED')
hist(ds$salary)
hist(certified$salary)
?hist
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge/Unit06_Clustering")
movies = read.table("movieLens.txt", header=FALSE, sep="|",quote="\"")
str(movies)
colnames(movies) = c("ID", "Title", "ReleaseDate", "VideoReleaseDate", "IMDB", "Unknown", "Action", "Adventure", "Animation", "Childrens", "Comedy", "Crime", "Documentary", "Drama", "Fantasy", "FilmNoir", "Horror", "Musical", "Mystery", "Romance", "SciFi", "Thriller", "War", "Western")
str(movies)
movies$ID = NULL
movies$ReleaseDate = NULL
movies$VideoReleaseDate = NULL
movies$IMDB = NULL
# Remove duplicates
movies = unique(movies)
str(movies)
sum(movies$Comedy)
sum(movies$Western)
sum(movies[movies$Romance == 1, "Drama"])
table(movies$Comedy)
table(movies$Western)
table(movies$Romance, movies$Drama)
distances = dist(movies[2:20], method = "euclidean")
# Hierarchical clustering
clusterMovies = hclust(distances, method = "ward")
# Plot the dendrogram
plot(clusterMovies)
clusterGroups = cutree(clusterMovies, k = 10)
tapply(movies$Action, clusterGroups, mean)
tapply(movies$Romance, clusterGroups, mean)
subset(movies, Title=="Men in Black (1997)")
clusterGroups[257]
# Create a new data set with just the movies from cluster 2
cluster2 = subset(movies, clusterGroups==2)
cluster2$Title[1:10]
clusterGroups_2 = cutree(clusterMovies, k = 2)
cluster2_1 = subset(movies, clusterGroups_2==1)
cluster2_2 = subset(movies, clusterGroups_2==2)
summary(cluster2_1)
summary(cluster2_2)
flower = read.csv("flower.csv", header=FALSE)
str(flower)
flowerMatrix = as.matrix(flower)
str(flowerMatrix)
flowerVector = as.vector(flowerMatrix)
str(flowerVector)
flowerVector2 = as.vector(flower)
str(flowerVector2)
distance = dist(flowerVector, method = "euclidean")
distance
clusterIntensity = hclust(distance, method="ward")
# Plot the dendrogram
plot(clusterIntensity)
rect.hclust(clusterIntensity, k = 3, border = "red")
flowerClusters = cutree(clusterIntensity, k = 3)
flowerClusters
tapply(flowerVector, flowerClusters, mean)
dim(flowerClusters) = c(50,50)
image(flowerClusters, axes = FALSE)
image(flowerMatrix,axes=FALSE,col=grey(seq(0,1,length=256)))
k = 5
healthy = read.csv("healthy.csv", header=FALSE)
healthyMatrix = as.matrix(healthy)
str(healthyMatrix)
# Plot image
image(healthyMatrix,axes=FALSE,col=grey(seq(0,1,length=256)))
healthyVector = as.vector(healthyMatrix)
distance = dist(healthyVector, method = "euclidean")
str(healthyVector)
set.seed(1)
KMC = kmeans(healthyVector, centers = k, iter.max = 1000)
str(KMC)
healthyClusters = KMC$cluster
KMC$centers[2]
# Plot the image with the clusters
dim(healthyClusters) = c(nrow(healthyMatrix), ncol(healthyMatrix))
image(healthyClusters, axes = FALSE, col=rainbow(k))
tumor = read.csv("tumor.csv", header=FALSE)
tumorMatrix = as.matrix(tumor)
tumorVector = as.vector(tumorMatrix)
# Apply clusters from before to new image, using the flexclust package
install.packages("flexclust")
library(flexclust)
KMC.kcca = as.kcca(KMC, healthyVector)
tumorClusters = predict(KMC.kcca, newdata = tumorVector)
# Visualize the clusters
dim(tumorClusters) = c(nrow(tumorMatrix), ncol(tumorMatrix))
image(tumorClusters, axes = FALSE, col=rainbow(k))
dailykos = read.csv('dailykos.csv')
summary(dailykos)
View(dailykos)
distances = dist(dailykos, method = "euclidean")
clusterdailykos = hclust(distances, method = "ward")
plot(clusterdailykos)
rect.hclust(clusterdailykos, k = 7, border = "red")
dailykosClusters = cutree(clusterIntensity, k = 7)
dailykosClusters
table(dailykosClusters)
clusters <- cutree(clusterdailykos, k=7)
cluster1 <- subset(dailyKos, clusters==1)
cluster2 <- subset(dailyKos, clusters==2)
clusters <- cutree(clusterdailykos, k=7)
cluster1 <- subset(dailykos, clusters==1)
cluster2 <- subset(dailykos, clusters==2)
cluster3 <- subset(dailykos, clusters==3)
cluster4 <- subset(dailykos, clusters==4)
cluster5 <- subset(dailykos, clusters==5)
cluster6 <- subset(dailykos, clusters==6)
cluster7 <- subset(dailykos, clusters==7)
table(clusters)
dailykosClusters = cutree(clusterdailykos, k = 7)
dailykosClusters
table(dailykosClusters)
tail(sort(colMeans(dailykosClusters)))
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
KMC_ = kmeans(dailykos, centers = k, iter.max = 1000)
set.seed(1000)
KMC_ = kmeans(dailykos, centers = k, iter.max = 1000)
set.seed(1000)
KMC_kos = kmeans(dailykos, centers = k, iter.max = 1000)
str(KMC_kos)
KMClusters = KMC_kos$cluster
table(KMClusters)
k = 7
# Run k-means
set.seed(1000)
KMC_kos = kmeans(dailykos, centers = k, iter.max = 1000)
str(KMC_kos)
# Extract clusters
KMClusters = KMC_kos$cluster
table(KMClusters)
clusters <- cutree(KMC_kos, k=7)
cluster1 <- subset(dailykos, clusters==1)
cluster2 <- subset(dailykos, clusters==2)
cluster3 <- subset(dailykos, clusters==3)
cluster4 <- subset(dailykos, clusters==4)
cluster1 <- subset(dailykos, KMClusters==1)
cluster2 <- subset(dailykos, KMClusters==2)
cluster3 <- subset(dailykos, KMClusters==3)
cluster4 <- subset(dailykos, KMClusters==4)
cluster5 <- subset(dailykos, KMClusters==5)
cluster6 <- subset(dailykos, KMClusters==6)
cluster7 <- subset(dailykos, KMClusters==7)
table(clusters)
tail(sort(colMeans(cluster1)))
tail(sort(colMeans(cluster2)))
tail(sort(colMeans(cluster3)))
tail(sort(colMeans(cluster4)))
tail(sort(colMeans(cluster5)))
tail(sort(colMeans(cluster6)))
tail(sort(colMeans(cluster7)))
clusters <- cutree(clusterdailykos, k=7)
dailykos$hcuster = clusters
dailykos$KMC = KMClusters
table(dailykos$KMC, dailykos$hcuster)
airlines = read.csv('AirlinesCluster.csv')
summary(airlines)
preproc = preProcess(airlines)
nstall.packages("caret")
install.packages("caret")
preproc = preProcess(airlines)
library(caret)
airlinesNorm = predict(preproc, airlines)
library(caret)
preproc = preProcess(airlines)
airlinesNorm = predict(preproc, airlines)
summary(airlinesNorm)
distances = dist(airlinesNorm, method = "euclidean")
clusterairlines = hclust(distances, method = "ward")
plot(clusterairlines)
rect.hclust(clusterairlines, k = 5, border = "red")
airlinesClusters = cutree(clusterairlines, k = 5)
airlinesClusters
table(airlinesClusters)
tapply(airlines$Balance, clusterGroups, mean)
cluster1 <- subset(airlines, airlinesClusters==1)
cluster2 <- subset(airlines, airlinesClusters==2)
cluster3 <- subset(airlines, airlinesClusters==3)
cluster4 <- subset(airlines, airlinesClusters==4)
cluster5 <- subset(airlines, airlinesClusters==5)
table(airlinesClusters)
tapply(airlines$Balance, cluster1, mean)
tapply(airlines$Balance, airlinesClusters, mean)
tapply(airlines$QualMiles, airlinesClusters, mean)
tapply(airlines$BonusMiles, airlinesClusters, mean)
tapply(airlines$BonusTrans, airlinesClusters, mean)
tapply(airlines$FlightMiles, airlinesClusters, mean)
tapply(airlines$FlightTrans, airlinesClusters, mean)
tapply(airlines$DaysSinceEnroll, airlinesClusters, mean)
k = 5
set.seed(88)
KMC_airlines = kmeans(airlinesNorm, centers = k, iter.max = 1000)
str(KMC_airlines)
KMClusters = KMC_airlines$cluster
table(KMClusters)
stocks = read.csv('StocksCluster.csv')
table(stocks$PositiveDec)/nrow(stocks)
cor(stocks)
summary(stocks)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
set.seed(144)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
stockLogit = glm(PositiveDec ~ ., data = stocksTrain, family = 'binomial')
stockLogit
trainpredicit = predict(stockLogit)
table(stocksTrain$PositiveDec, trainpredicit >0.5)
(3324+737)/nrow(stocksTrain)
trainpredicit = predict(stockLogit, class = 'response')
table(stocksTrain$PositiveDec, trainpredicit > 0.5)
StocksModel = glm(PositiveDec ~ ., data = stocksTrain, family = 'binomial')
trainpredicit = predict(StocksModel, class = 'response')
table(stocksTrain$PositiveDec, trainpredicit >= 0.5)
testpredicit = predict(StocksModel, newdata = stocksTest, class = 'response')
table(stocksTest$PositiveDec, testpredicit>= 0.5)
(1427+312)/nrow(stocksTest)
stocks$PositiveDec = as.factor(stocks$PositiveDec)
summary(stocks)
library(caTools)
set.seed(144)
spl = sample.split(stocks$PositiveDec, SplitRatio = 0.7)
stocksTrain = subset(stocks, spl == TRUE)
stocksTest = subset(stocks, spl == FALSE)
StocksModel = glm(PositiveDec ~ ., data = stocksTrain, family = 'binomial')
trainpredicit = predict(StocksModel, class = 'response')
table(stocksTrain$PositiveDec, trainpredicit >= 0.5)
(3324+737)/nrow(stocksTrain)
testpredicit = predict(StocksModel, newdata = stocksTest, class = 'response')
table(stocksTest$PositiveDec, testpredicit>= 0.5)
(1427+312)/nrow(stocksTest)
table(stocksTest$PositiveDec)
1897/nrow(testpredicit)
1897/nrow(stocksTest)
trainpredicit = predict(StocksModel, type = 'response')
table(stocksTrain$PositiveDec, trainpredicit >= 0.5)
(990+3640)/nrow(stocksTrain)
testpredicit = predict(StocksModel, newdata = stocksTest, type = 'response')
table(stocksTest$PositiveDec, testpredicit>= 0.5)
(1427+312)/nrow(stocksTest)
(417+1553)/nrow(stocksTest)
limitedTrain = stocksTrain
limitedTrain$PositiveDec = NULL
limitedTest = stocksTest
limitedTest$PositiveDec = NULL
library(caret)
preproc = preProcess(limitedTrain)
normTrain = predict(preproc, limitedTrain)
normTest = predict(preproc, limitedTest)
summary(normTrain)
summary(normTest)
k = 3
# Run k-means
set.seed(144)
KMC_stocks = kmeans(normTrain, centers = k, iter.max = 1000)
str(KMC_stocks)
table(KMC_stocks$cluster)
library(flexclust)
km.kcca = as.kcca(km, normTrain)
KMC_stocks.kcca = as.kcca(km, normTrain)
KMC_stocks.kcca = as.kcca(KMC_stocks, normTrain)
clusterTrain = predict(KMC_stocks.kcca)
clusterTest = predict(KMC_stocks.kcca, newdata=normTest)
table(clusterTest)
stocksTrain1 = subset(stocksTrain, clusterTrain == 1)
stocksTrain2 = subset(stocksTrain, clusterTrain == 2)
stocksTrain3 = subset(stocksTrain, clusterTrain == 3)
tapply(stocksTrain$PositiveDec, clusterTrain, mean)
mean(stocksTrain1$PositiveDec)
table(stocksTrain1$PositiveDec)
sum(stocksTrain1$PositiveDec)/nrow(stocksTrain1)
table(stocksTrain1$PositiveDec)/nrow(stocksTrain1)
table(stocksTrain2$PositiveDec)/nrow(stocksTrain2)
table(stocksTrain3$PositiveDec)/nrow(stocksTrain3)
StocksModel1 = glm(PositiveDec ~ ., data = stocksTrain1, family = 'binomial')
trainpredicit1 = predict(StocksModel1, type = 'response') # be careful, don't use class = 'response'
summary(trainpredicit1)
summary(StocksModel1)
StocksModel2 = glm(PositiveDec ~ ., data = stocksTrain2, family = 'binomial')
trainpredicit2 = predict(StocksModel2, type = 'response') # be careful, don't use class = 'response'
summary(StocksModel2)
StocksModel3 = glm(PositiveDec ~ ., data = stocksTrain3, family = 'binomial')
trainpredicit3 = predict(StocksModel3, type = 'response') # be careful, don't use class = 'response'
summary(StocksModel3)
summary(stocksTrain3)
summary(StocksModel1)
summary(StocksModel2)
summary(StocksModel3)
stocksTest1 = subset(stocksTest, clusterTrain == 1)
stocksTest2 = subset(stocksTest, clusterTrain == 2)
stocksTest3 = subset(stocksTest, clusterTrain == 3)
testpredicit1 = predict(StocksModel1, newdata = stocksTest1, type = 'response')
table(stocksTest1$PositiveDec, testpredicit1>= 0.5)
(101+498)/nrow(stocksTest1)
testpredicit1 = predict(StocksModel1, newdata = stocksTest1, type = 'response')
table(stocksTest1$PositiveDec, testpredicit1>= 0.5)
(101+498)/nrow(stocksTest1)
stocksTest1 = subset(stocksTest, clusterTest == 1)
stocksTest2 = subset(stocksTest, clusterTest == 2)
stocksTest3 = subset(stocksTest, clusterTest == 3)
(101+498)/nrow(stocksTest1)
table(stocksTest1$PositiveDec, testpredicit1>= 0.5)
testpredicit1 = predict(StocksModel1, newdata = stocksTest1, type = 'response')
table(stocksTest1$PositiveDec, testpredicit1>= 0.5)
(101+498)/nrow(stocksTest1)
(30+774)/nrow(stocksTest1)
testpredicit2 = predict(StocksModel2, newdata = stocksTest2, type = 'response')
table(stocksTest2$PositiveDec, testpredicit2>= 0.5)
(388+757)/nrow(stocksTest1)
(388+757)/nrow(stocksTest2)
testpredicit3 = predict(StocksModel3, newdata = stocksTest3, type = 'response')
table(stocksTest3$PositiveDec, testpredicit3>= 0.5)
(49+13)/nrow(stocksTest3)
AllPredictions = c(PredictTest1, PredictTest2, PredictTest3)
AllPredictions = c(testpredicit1, testpredicit2, testpredicit3)
AllOutcomes = c(stocksTest1$PositiveDec, stocksTest2$PositiveDec, stocksTest3$PositiveDec)
table(stocksTest$PositiveDec, AllPredictions>= 0.5)
(361+1438)/nrow(stocksTest)
table(AllOutcomes, AllPredictions>= 0.5)
(467+1544)/nrow(stocksTest)
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge/Unit07_Visualization")
WHO = read.csv("WHO.csv")
str(WHO)
plot(WHO$GNI, WHO$FertilityRate)
install.packages("ggplot2")
install.packages("ggplot2")
library(ggplot2)
scatterplot = ggplot(WHO, aes(x = GNI, y = FertilityRate))
scatterplot + geom_point()
scatterplot + geom_line()
scatterplot + geom_point()
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
scatterplot + geom_point(color = "darkred", size = 3, shape = 8)
scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
fertilityGNIplot = scatterplot + geom_point(colour = "blue", size = 3, shape = 17) + ggtitle("Fertility Rate vs. Gross National Income")
pdf("MyPlot.pdf")
print(fertilityGNIplot)
dev.off()
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
# Another option:
scatterplot + geom_point(color = "blue", size = 3, shape = 15)
scatterplot + geom_point(color = "blue", size = 3, shape = 17)
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = Region)) + geom_point()
ggplot(WHO, aes(x = GNI, y = FertilityRate, color = LifeExpectancy)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point()
mod = lm(Under15 ~ log(FertilityRate), data = WHO)
summary(mod)
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm")
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", level = 0.99)
# No confidence interval in the plot
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", se = FALSE)
ggplot(WHO, aes(x = log(FertilityRate), y = Under15)) + geom_point() + stat_smooth(method = "lm", colour = "orange")
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point()
ggplot(WHO, aes(x = FertilityRate, y = Under15)) + geom_point() + scale_color_brewer(palette="Dark2")
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region)) + geom_point() + scale_color_brewer(palette="Dark2")
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region)) + geom_point() #+ scale_color_brewer(palette="Dark2")
ggplot(WHO, aes(x = FertilityRate, y = Under15, color = Region)) + geom_point() + scale_color_brewer(palette="Dark2")
