#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(2,10))
mean(xbar15)
sd(xbar15)
sd(survey$name_letters)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$name_letters, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(2,10))
mean(xbar25)
sd(xbar25)
sd(survey$name_letters)/sqrt(25)
hist(survey$happy)
fivenum(survey$happy)
mean(survey$happy)
sd(survey$happy)
xbar5 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =5)
xbar5[i] <-  mean(x)}
# Graph the histogram of 1,000 sample means.
hist(xbar5,xlim=c(50,100))
# Calculate the mean and sd of the sampling distribution.
mean(xbar5)
sd(xbar5)
# Compare to the std dev predicted by the CTL.
sd(survey$happy)/sqrt(5)
#Repeat for samples of size n=15
xbar15 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =15)
xbar15[i] <- mean(x)}
hist(xbar15,xlim=c(50,100))
mean(xbar15)
sd(xbar15)
sd(survey$happy)/sqrt(15)
#Repeat for samples of size n=25
xbar25 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$happy, size =25)
xbar25[i] <- mean(x)}
hist(xbar25,xlim=c(50,100))
mean(xbar25)
sd(xbar25)
sd(survey$happy)/sqrt(25)
library(SDSFoundations)
survey <- StudentSurvey
str(survey)
hist(survey$austin)
mean(survey$austin)
sd(survey$austin)
sd(survey$austin) / sqrt(10)
xbar10 <-rep(NA, 1000)
for (i in 1:1000)
{x <-sample(survey$austin, size =10)
xbar10[i] <- mean(x)}
hist(xbar10,xlim=c(0,15))
qt(c(.025, .975), df=24)
qt(c(.025, .975), df=6)
qt(0.05, df=6)
library(SDSFoundations)
bull <- BullRiders
str(bull)
USA <-bull[bull$Country=="USA",]
# Summarize the bull rider weights
mean(USA$Weight)
sd(USA$Weight)
# Visualize the weight distribution
hist(USA$Weight, main='Histogram of US Bull Rider Weights',xlab='Weight (lbs)')
# Run the single sample t-test
t.test(USA$Weight, mu=190)
View(USA)
View(USA)
hist(bull$YearBorn, main = 'Histogram of Bull Rider Weights, xlab= 'Weight (lbs)')
mean(USA$Weight)
sd(USA$Weight)
t.test(USA$Weight, mu=190)
View(bull)
rider2014_5 = bull[bull$Events14 >= 5, ]
mean(rider2014_5$RidePer14)
sd(rider2014_5$RidePer14)
t.test(rider2014_5$RidePer14, mu=0.5)
hist(rider2014_5$RidePer14, main='Histogram of US Bull Rider Weights',xlab='Weight (lbs)')
bull$earnings_per = bull$Earnings12/bull$Events12
View(bull)
hist(rider2014_5$RidePer14,xlab='Weight (lbs)')
hist(bull$earnings_per)
bull$newvariable <- log(bull$originalvariable)
bull$newvariable <- log(bull$earnings_per)
hist(bull$newvariable)
mean(bull$newvariable)
?mean
mean(bull$newvariable, na.rm = FALSE)
mean(bull$newvariable, na.rm = TRUE)
t.test(bull$newvariable, mu=8.846387)
exp(8.572169 )
exp(9.120605)
potatochips = c(29.4	29	28.4	28.8	28.9	29.3	28.5	28.2)
potatochips = c(29.4, 29, 28.4, 28.8, 28.9, 29.3, 28.5, 28.2)
mean(potatochips)
sd(potatochips)
t.test(potatochips, mu=28.5)
qt(c(.025, .975), df=7)
qt(.95, df=24)
qt(c(0.05, 0.95), df=11)
qt(c(0.025, 0.975), 9)
qt(0.05, 9)
qt(0.95, 9)
sd(c(-1, 1, -2, -2))
sd(c(-1, 1, -2, -2))/2
qt(c(0.025, 0.975), 3)
qt(0.95, 3)
qt(0.05, 3)
qt(0.05, 4)
qt(0.05, 3)
qt(c(0.025, 0.975), 4)
qt(c(0.025, 0.975), 3)
t.test(c(-1, 1, -2, -2), 0)
t.test(c(-1, 1, -2, -2), mu = 0)
library(SDSFoundations)
post <- PostSurvey
library(SDSFoundations)
post <- PostSurvey
View(post)
underclass_happy <- post$happy[post$classification=='Freshman'|post$classification=='Sophomore']
upperclass_happy <- post$happy[post$classification=='Junior'|post$classification=='Senior']
# Check the normality assumption
hist(underclass_happy, xlab='Underclassman Happiness', main='Percent of Time Happy')
hist(upperclass_happy, xlab='Upperclassman Happiness', main='Percent of Time Happy')
t.test(underclass_happy, upperclass_happy)
mean(underclass_happy)
post$diff_happy <- post$happy - post$post_happy
# Check the normality assumption
hist(post$diff_happy, xlab= 'Difference in Happiness over the Semester', main = 'Happy-Post Happy')
# Run dependent t-test
t.test(post$happy, post$post_happy, paired=T)
post$diff_hw = post$hw_hours_college - post$hw_hours_HS
mean(post$diff_hw)
t.test(post$hw_hours_college, post$hw_hours_HS, alternative = 'greater')
?t.test
t.test(post$hw_hours_college, post$hw_hours_HS, alternative = 'greater', paired = TRUE)
t.test(post$diff_hw, alternative = 'greater')
greek = post[post$greek == yes, ]
greek = post[post$greek == "yes", ]
nongreek = post[post$greek == "no", ]
mean(greek$sleep_Sat) - mean(nongreek$sleep_Sat)
t.test(greek$sleep_Sat, nongreek$sleep_Sat, alternative = 'less')
hist(greek$sleep_Sat)
hist(nongreek$sleep_Sat)
hist(post$diff_hw)
hist(greek$sleep_Sat)
hist(nongreek$sleep_Sat)
nursing = post[post$major == "Nursing", ]
biology = post[post$major == "Biology", ]
hist(nursing$diff_hw)
hist(biology$diff_hw)
t.test(nursing$diff_hw, biology$diff_hw)
qt(0.95, 25)
qt(0.05, 25)
qt(0.05, 15)
leftright <- read.csv("C:/Users/Wanli/OneDrive/R/FoundationsOfDataAnalysisPart2/leftright.csv")
View(leftright)
sd(leftright$left)
sd(leftright$right)
leftright$diff = leftright$left - leftright$right
sd(leftright$diff)
sd(leftright$diff)/sqrt(16)
t.test(leftright$diff, alternative = 'greater')
t.test(leftright$diff)
chisq.test(c(38, 28, 24))
chisqt?
fdf
library(SDSFoundations)
res = TempskiResilience
library("SDSFoundations", lib.loc="~/R/win-library/3.2")
remove.packages("SDSFoundations", lib="~/R/win-library/3.2")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
install.packages("C:/Users/Wanli/Downloads/SDSFoundations_1.4.zip", repos = NULL, type = "win.binary")
library(SDSFoundations)
res <- TempskiResilience
View(res)
clin <- res[res$Group == "Clinical Sciences",]
#Question One
#Intial Correlations
vars <- c("QoL", "BDI")
cor(clin[,vars])
#RQ1 Model
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
confint(ov_mod)
summary(ov_mod)
summary(ov_mod)
summary(ov_mod)
?summary
?corr.test
plot(ov_mod, which=1)
cutoff <- 4/(ov_mod$df)
plot(ov_mod, which=4, cook.levels=cutoff)
# Question Two
#Initial correlations
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
?corr.test
#RQ2 Model
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
?lmBeta
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
cor(clin[,vars], use="pairwise.complete.obs")
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
1 - 0.0134
vars <- c("QoL", "BDI")
cor(clin[,vars])
#RQ1 Model
ov_mod <- lm(QoL ~ BDI, data=clin)
summary(ov_mod)
confint(ov_mod)
#Diagnostics
plot(ov_mod, which=1)
cutoff <- 4/(ov_mod$df)
plot(ov_mod, which=4, cook.levels=cutoff)
# Question Two
#Initial correlations
vars <- c("MS.QoL", "DREEM.S.SP", "DREEM.A.SP", "Resilience", "BDI", "Age")
cor(clin[,vars], use="pairwise.complete.obs")
#Test the initial correlations
library(psych)
corr.test(clin[,vars], use="pairwise.complete.obs")
?corr.test
#RQ2 Model
ms_mod <- lm(MS.QoL ~ DREEM.S.SP + DREEM.A.SP + Resilience + BDI + Age, data=clin)
summary(ms_mod)
basic <- res[res$Group == "Basic Sciences",]
View(basic)
basic <- res[res$Group == "Basic Sciences",]
vars <- c("MS.QoL", "WHOQOL.ENV", "WHOQOL.PH", "WHOQOL.PSY", "WHOQOL.SOC", "WHOQOL.ENV")
cor(basic[,vars], use="pairwise.complete.obs")
vars <- c("MS.QoL", "WHOQOL.PH", "WHOQOL.PSY", "WHOQOL.SOC", "WHOQOL.ENV")
cor(basic[,vars], use="pairwise.complete.obs")
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=clin)
summary(ms_mod)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
lmBeta(ms_mod)
?lmBeta
round(pCorr(ms_mod), 4)
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=basic)
summary(ms_mod)
lmBeta(ms_mod)
?lmBeta
round(pCorr(ms_mod), 4)
ms_mod <- lm(MS.QoL ~ WHOQOL.ENV + WHOQOL.PH + WHOQOL.PSY + WHOQOL.SOC + WHOQOL.ENV, data=basic)
summary(ms_mod)
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
ms_mod <- lm(BDI ~ Female + Age + State.Anxiety + Trait.anxiety, data=clin)
summary(ms_mod)
summary(ms_mod)
confint(ms_mod)
#Diagnostics
library(car)
vif(ms_mod)
plot(ms_mod, which=1)
cutoff <- 4/(ms_mod$df)
plot(ms_mod, which=4, cook.levels=cutoff)
#Put model into context
lmBeta(ms_mod)
round(pCorr(ms_mod), 4)
qf(.95, df1=4, df2=88)
qf(.05, df1=4, df2=88)
qf(.95, df1=4, df2=88)
qf(.95, df1=4, df2=1)
qf(.95, df1=4, df2=88)
install.packages("caTools")
polling = read.csv("PollingData.csv")
str(polling)
table(polling$Year)
summary(polling)
setwd("C:/Users/Wanli/OneDrive/R/theAnalyticsEdge/Unit03")
clear
clc
polling = read.csv("PollingData.csv")
str(polling)
table(polling$Year)
summary(polling)
# Install and load mice package
install.packages("mice")
library(mice)
# Multiple imputation
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
summary(imputed)
polling$Rasmussen = imputed$Rasmussen
polling$SurveyUSA = imputed$SurveyUSA
summary(polling)
detach("package:Rcpp", unload=TRUE)
detach("package:mice", unload=TRUE)
imputed = complete(mice(simple))
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
library("mice", lib.loc="~/R/win-library/3.2")
library("Rcpp", lib.loc="~/R/win-library/3.2")
imputed = complete(mice(simple))
simple = polling[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount")]
summary(simple)
set.seed(144)
imputed = complete(mice(simple))
Train = subset(polling, Year == 2004 | Year == 2008)
Test = subset(polling, Year == 2012)
table(Train$Republican)
?sign
table(sign(Train$Rasmussen))
Train
cor(Train)
Train = subset(polling, Year == 2004 | Year == 2008)
Test = subset(polling, Year == 2012)
# Smart Baseline
table(Train$Republican)
?sign
sign(20)
sign(-10)
sign(0)
table(sign(Train$Rasmussen))
table(Train$Republican, sign(Train$Rasmussen))
# Video 4
# Multicollinearity
cor(Train)
str(Train)
cor(Train[c("Rasmussen", "SurveyUSA", "PropR", "DiffCount", "Republican")])
mod1 = glm(Republican~PropR, data=Train, family="binomial")
summary(mod1)
pred1 = predict(mod1, type="response")
table(Train$Republican, pred1 >= 0.5)
mod2 = glm(Republican~SurveyUSA+DiffCount, data=Train, family="binomial")
pred2 = predict(mod2, type="response")
table(Train$Republican, pred2 >= 0.5)
summary(mod2)
table(Test$Republican, sign(Test$Rasmussen))
TestPrediction = predict(mod2, newdata=Test, type="response")
table(Test$Republican, TestPrediction >= 0.5)
subset(Test, TestPrediction >= 0.5 & Republican == 0)
dir
ls
ls()
dir()
setwd("C:/Users/Wanli/OneDrive/dsmain/theAnalyticsEdge/Unit03")
dir()
songs = read.csv("songs.csv")
summary(songs)
str(songs)
sum(songs$year == 2010)
sum(songs$artistname == "Michael Jackson")
sum(songs$artistname == "Michael Jackson" | songs$Top10 == 1)
sum(songs$artistname == "Michael Jackson" & songs$Top10 == 1)
songs[songs$artistname == "Michael Jackson" & songs$Top10 == 1, ]
table(songs$timesignature)
which.max(songs$tempo)
songs[which.max(songs$tempo)]
songs[which.max(songs$tempo),]
songsTrain = subset(songs, songs$year <= 2009)
songsTest = subset(songs, songs$year == 2010)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
songsTrain = songsTrain[ , !(names(songsTrain) %in% nonvars) ]
songsTest = songsTest[ , !(names(songsTest) %in% nonvars) ]
songsLog1 = glm(Top10 ~ ., data=songsTrain, family=binomial)
summary(songsLog1)
cor(songsTrain[c("loudness", "energy")])
songsLog2 = glm(Top10 ~ . - loudness, data=songsTrain, family=binomial)
summary(songsLog2)
songsLog3 = glm(Top10 ~ . - energy, data=songsTrain, family=binomial)
summary(songsLog3)
songTestPred3 = predict(songsLog3, newdata = songsTest, type = "response")
table(songsTest$top], songTestPred3 >= 0.45)
table(songsTest$top, songTestPred3 >= 0.45)
table(songsTest$Top10, songTestPred3 >= 0.45)
(309 + 19) / (373)
songsTestPred3 = predict(songsLog3, newdata = songsTest, type = "response")
table(songsTest$Top10, songsTestPred3 >= 0.45)
table(songsTest$Top10)
314/373
19/(40+19)
309/(309+5)
parole = read.csv("parole.csv")
str(parole)
sum(parole$violator == 1)
summary(parole)
View(parole)
table(parole$male)
table(parole$race)
table(parole$age)
table(parole$state)
table(parole$multiple.offenses)
table(parole$crime)
summary(parole)
str(parole)
table(parole)
parole2 = read.csv("parole.csv")
parole2$statefactor = as.factor(parole2$state)
View(parole2)
View(songs)
View(songs)
summary(songs)
str(songs)
summary(parole)
str(parole)
summary(parole)
summary(parole2)
parole$state = as.factor(parole$state)
parole$crime = as.factor(parole$crime)
summary(parole)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
nrow(train)
nrow(test)
paroleLog1 = glm(violator ~ ., data = train, family = "binomial")
summary(paroleLog1)
exp(1.61)
exp(1.6119919)
test2 = parole[1,]
View(test2)
test2$male = 1
test2age = 50
View(test2)
test2age
parole[1,]
test2[1,]
View(test2)
View(test2)
summary(test2)
test2 = read.csv("test2.csv")
summary(test2)
test2$state = as.factor(test2$state)
test2$crime = as.factor(test2$crime)
summary(test2)
predict(paroleLog1, newdata = test2, type = "response")
0.154383/(1-0.154383)
predict(paroleLog1, newdata = test, type = "response")
testPred1 = predict(paroleLog1, newdata = test, type = "response")
max(testPred1)
table(test$violator, testPred1 > 0.5)
table(test$violator, testPred1 >= 0.5)
table(test$violator, testPred1 > 0.5)
12/(11 + 12)
167/(167+12)
(12+167)/202
(167+12)/202
table(test$violator, testPred1 > 0.4)
table(test$violator, testPred1 > 0.1)
library(ROCR)
ROCRpred1 = prediction(testPred1, test$violator)
ROCRperf1 = performance(ROCRpred1, "tpr", "fpr")
#?prediction
#?predict
plot(ROCRperf1)
plot(ROCRperf1, colorize = TRUE)
plot(ROCRperf1, colorize = TRUE)
plot(ROCRperf1, colorize = TRUE, print.cutoffs.at = seq(0, 1, 0.1), text.adj = c(-0.2, 1.7))
summary(ROCRperf1)
auc = as.numeric(performance(ROCRpred1, "auc")@y.values)
auc
